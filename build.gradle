plugins {
	id 'fabric-loom' version '1.5-SNAPSHOT'
	id 'maven-publish'
	id "com.modrinth.minotaur" version "2.+"
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	repositories {
		maven {
			name = "TerraformersMC"
			url = "https://maven.terraformersmc.com/releases"
		}
		maven {
			name = "Ladysnake Libs"
			url = 'https://maven.ladysnake.org/releases'
		}
		maven {
			name = 'GeckoLib'
			url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
			content {
				includeGroupByRegex("software\\.bernie.*")
				includeGroup("com.eliotlash.mclib")
			}
		}
		maven { url 'https://maven.wispforest.io' }
	}
}

// Add the generated resources to the main source set
sourceSets {
	main {
		resources {
			srcDirs += [
					'src/main/generated'
			]
		}
		java {
      srcDirs += [
				'src/main/generated/java'
			]
    }
	}
}

compileJava {
	options.generatedSourceOutputDirectory = file("${projectDir}/src/main/generated/java/larguma/crawling_mysteries/config")
}

project.tasks['processResources'].dependsOn('compileJava')
project.tasks['compileJava'].dependsOn('sourcesJar')

fabricApi {
	configureDataGeneration()
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	modImplementation "dev.emi:trinkets:${project.trinkets_version}"
	modImplementation "software.bernie.geckolib:geckolib-fabric-1.20.4:${project.geckolib_version}"
	annotationProcessor modImplementation("io.wispforest:owo-lib:${project.owo_version}")
	modImplementation "io.wispforest:lavender:${project.lavender_version}"
	include "io.wispforest:owo-sentinel:${project.owo_version}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}

import com.modrinth.minotaur.dependencies.ModDependency
 
modrinth {
	token = System.getenv("MODRINTH_TOKEN")
	projectId = "${modrinth_id}" // The ID of your Modrinth project. Slugs will not work.
	versionNumber = "${mod_version}" // The (preferably SemVer) version of the mod. If not specified, it'll use the `version` declaration
	versionType = "${mod_version_type}"
	versionName = "Crawling Mysteries ${mod_version}" // The version title. If not specified, it'll use the version number
	uploadFile = remapJar // Tells Minotaur to use the remapped jar
	gameVersions = ["${minecraft_version}"] // An array of game versions the version supports
	loaders = ['fabric'] // Self-explanatory.
	dependencies = [
		new ModDependency('P7dR8mSH', 'required'), // fabric-api
		new ModDependency('5aaWibi9', 'required'), // trinkets
		new ModDependency('8BmcQJ2H', 'required'), // geckolib
		new ModDependency('ccKDOlHs', 'required'), // owo-lib
		new ModDependency('D5h9NKNI', 'required') // lavender
	]
}